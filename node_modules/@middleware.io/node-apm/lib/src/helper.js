"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addVCSMetadata = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const git = __importStar(require("isomorphic-git"));
// Module-level cache for VCS metadata
let cachedVCS = { resolved: false };
// Helper to find the git root directory
function findGitRoot(startDir) {
    let dir = startDir;
    while (true) {
        try {
            if (fs_1.default.existsSync(path_1.default.join(dir, '.git'))) {
                return dir;
            }
        }
        catch (e) {
            // ignore
        }
        const parentDir = path_1.default.dirname(dir);
        if (parentDir === dir)
            break;
        dir = parentDir;
    }
    return null;
}
function resolveVCSInfo() {
    return __awaiter(this, void 0, void 0, function* () {
        if (cachedVCS.resolved)
            return { sha: cachedVCS.sha, url: cachedVCS.url };
        let sha = process.env.MW_VCS_COMMIT_SHA;
        let url = process.env.MW_VCS_REPOSITORY_URL;
        const repoDir = findGitRoot(process.cwd());
        if (!sha && repoDir) {
            try {
                sha = yield git.resolveRef({ fs: fs_1.default, dir: repoDir, ref: 'HEAD' });
            }
            catch (_a) { }
        }
        if (!url && repoDir) {
            try {
                const remotes = yield git.listRemotes({ fs: fs_1.default, dir: repoDir });
                const origin = remotes.find((r) => r.remote === 'origin');
                url = origin ? origin.url : undefined;
                if (url)
                    url = url.replace(/\.git$/, '');
            }
            catch (_b) { }
        }
        cachedVCS = { sha, url, resolved: true };
        return { sha, url };
    });
}
function addVCSMetadata(resourceAttributes) {
    return __awaiter(this, void 0, void 0, function* () {
        const { sha, url } = yield resolveVCSInfo();
        if (sha) {
            resourceAttributes["vcs.commit_sha"] = sha;
        }
        if (url) {
            resourceAttributes["vcs.repository_url"] = url;
        }
    });
}
exports.addVCSMetadata = addVCSMetadata;
